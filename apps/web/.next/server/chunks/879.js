exports.id=879,exports.ids=[879],exports.modules={21223:()=>{},34837:()=>{},26281:(e,t,a)=>{"use strict";a.d(t,{Ay:()=>n,eb:()=>s});class n extends Error{constructor(e,t){super(e),this.originalError=t,this.name="AnalysisError",Error.captureStackTrace&&Error.captureStackTrace(this,n)}}class s extends Error{constructor(e,t,a){super(e),this.statusCode=t,this.originalError=a,this.name="GeminiAPIError",Error.captureStackTrace&&Error.captureStackTrace(this,s)}}},48798:(e,t,a)=>{"use strict";a.d(t,{analysisService:()=>c});var n=a(52306),s=a(89254),r=a(26281),i=a(73292),o=a(71017);class l{constructor(){if(this.apiKeyConfigured=!!process.env.GEMINI_API_KEY,this.modelName=process.env.GEMINI_MODEL||"gemini-2.5-flash",!this.apiKeyConfigured){console.warn("GEMINI_API_KEY not configured - AI analysis will be skipped"),this.client=null;return}this.client=new n.fA({apiKey:process.env.GEMINI_API_KEY})}async processAnalysis(e,t,a,n={}){let s=Date.now();try{if(console.log(`Starting Gemini native analysis for upload ${e} with ${t.length} files`),!t||0===t.length)throw new r.Ay("No file references provided for analysis");if(!a)throw new r.Ay("User ID is required for analysis");let i=n.reportTitle||`Financial Analysis - ${new Date().toLocaleDateString()}`,o=await this.createInitialReport({userId:a,uploadId:e,reportTitle:i,sourceDocumentCount:t.length,status:"processing",progress:0});console.log(`Created analysis report ${o._id}`);try{await this.updateProgress(o._id,20,"Processing documents with AI...");let e=await this.analyzeDocumentsWithGemini(t,a);console.log("Gemini native analysis completed successfully"),await this.updateProgress(o._id,80,"Saving analysis results...");let n={...e,metadata:{processingTime:Date.now()-s,filesProcessed:t.length,analysisTimestamp:new Date().toISOString(),modelUsed:this.modelName,useNativeDocumentUnderstanding:!0}};return await this.completeAnalysis(o._id,n),console.log(`Analysis completed successfully for report ${o._id}`),o._id}catch(e){throw await this.markAnalysisFailed(o._id,e),e}}catch(e){if(console.error("Analysis failed:",e),e instanceof r.Ay)throw e;throw new r.Ay(`Failed to process financial analysis: ${e instanceof Error?e.message:String(e)}`,e)}}async analyzeDocumentsWithGemini(e,t){if(!this.client)return console.log("Gemini client not available, returning placeholder analysis"),this.generatePlaceholderAnalysis(e);try{let t=[];t.push({text:`You are a financial analyst AI. Analyze the following bank statement/financial documents and provide a comprehensive financial analysis.

Please analyze this financial data and return a JSON response with the following structure:
{
  "totalIncome": number,
  "totalExpenses": number,
  "netCashFlow": number,
  "categories": {
    "income": [
      { "category": "string", "amount": number, "percentage": number }
    ],
    "expenses": [
      { "category": "string", "amount": number, "percentage": number }
    ]
  },
  "monthlyTrends": [
    { "month": "string", "income": number, "expenses": number }
  ],
  "insights": [
    { "type": "string", "description": "string", "severity": "low|medium|high" }
  ],
  "recommendations": [
    { "category": "string", "suggestion": "string", "potentialSavings": number }
  ],
  "summary": "string"
}

Focus on:
1. Categorizing transactions (salary, groceries, utilities, entertainment, etc.)
2. Identifying spending patterns and trends
3. Calculating totals and percentages
4. Providing actionable insights and recommendations
5. Highlighting any unusual or concerning patterns

Important guidelines:
- Ensure all amounts are positive numbers
- Percentages should be calculated accurately and sum to 100 for each category type
- Provide meaningful insights based on the data patterns
- Include at least 3-5 actionable recommendations
- Categorize expenses into common categories like: Housing, Transportation, Food, Entertainment, Healthcare, Utilities, Shopping, etc.
- For income, categorize into: Salary, Freelance, Investment, Benefits, etc.
- Only return valid JSON without any markdown formatting or additional text
- If data is insufficient for certain fields, use reasonable defaults (0 for amounts, empty arrays for categories)`});for(let a=0;a<e.length;a++){let n=e[a];console.log(`Processing file ${a+1}/${e.length}: ${n}`);try{if(n.startsWith("local://")){let e=n.replace("local://",""),s=(0,o.join)(process.cwd(),"uploads",e),r=await (0,i.readFile)(s),l=this.extractFilename(n)||`document-${a+1}`,c=e.toLowerCase().split(".").pop();if("pdf"===c)t.push({inlineData:{mimeType:"application/pdf",data:r.toString("base64")}});else if("txt"===c||"csv"===c){let e=r.toString("utf-8");t.push({text:`Document: ${l}

${e}`})}else console.warn(`Unsupported file type for ${l}, skipping`)}}catch(e){console.error(`Failed to process file ${n}:`,e)}}console.log("Sending documents to Gemini for analysis...");let a=await this.client.models.generateContent({model:this.modelName,contents:t});if(!a||!a.text)throw new r.Ay("Empty response from Gemini API");let n=this.cleanJsonResponse(a.text),s=JSON.parse(n);return this.validateAnalysisStructure(s)}catch(e){if(console.error("Gemini analysis failed:",e),e instanceof r.Ay)throw e;throw new r.Ay(`Gemini document analysis failed: ${e instanceof Error?e.message:String(e)}`,e)}}cleanJsonResponse(e){let t=e.replace(/```json\s*/g,"").replace(/```\s*/g,"");if(!(t=t.trim()).startsWith("{")){let e=t.match(/\{[\s\S]*\}/);e&&(t=e[0])}return t}validateAnalysisStructure(e){if(!e||"object"!=typeof e)throw new r.Ay("AI response is not a valid object");let t=["totalIncome","totalExpenses","categories","insights","recommendations","summary"].filter(t=>!(t in e));if(t.length>0)throw new r.Ay(`Missing required fields in AI response: ${t.join(", ")}`);if(e.totalIncome=this.validateNumber(e.totalIncome,"totalIncome"),e.totalExpenses=this.validateNumber(e.totalExpenses,"totalExpenses"),e.netCashFlow=e.totalIncome-e.totalExpenses,!e.categories||"object"!=typeof e.categories)throw new r.Ay("Categories field must be an object");return Array.isArray(e.categories.income)||(e.categories.income=[]),Array.isArray(e.categories.expenses)||(e.categories.expenses=[]),e.monthlyTrends=Array.isArray(e.monthlyTrends)?e.monthlyTrends:[],e.insights=Array.isArray(e.insights)?e.insights:[],e.recommendations=Array.isArray(e.recommendations)?e.recommendations:[],"string"!=typeof e.summary&&(e.summary=String(e.summary||"")),e}generatePlaceholderAnalysis(e){return{totalIncome:5e3,totalExpenses:3500,netCashFlow:1500,categories:{income:[{category:"Salary",amount:4500,percentage:90},{category:"Other Income",amount:500,percentage:10}],expenses:[{category:"Housing",amount:1050,percentage:30},{category:"Food",amount:700,percentage:20},{category:"Transportation",amount:525,percentage:15},{category:"Utilities",amount:350,percentage:10},{category:"Entertainment",amount:350,percentage:10},{category:"Other",amount:525,percentage:15}]},monthlyTrends:[{month:"Current",income:5e3,expenses:3500}],insights:[{type:"Demo Mode",description:"AI analysis requires Gemini API key configuration",severity:"low"},{type:"File Processing",description:"Files uploaded successfully and ready for analysis",severity:"low"}],recommendations:[{category:"Setup",suggestion:"Configure Gemini API key for real AI insights",potentialSavings:0},{category:"Analysis",suggestion:"Upload bank statements for comprehensive analysis",potentialSavings:0}],summary:`Demo analysis completed for ${e.length} document(s). This is placeholder data. Configure GEMINI_API_KEY for real AI-powered insights.`,metadata:{isPlaceholderData:!0}}}validateNumber(e,t){if("string"==typeof e){let t=parseFloat(e);if(!isNaN(t))return Math.max(0,t)}return"number"!=typeof e||isNaN(e)?(console.warn(`Invalid ${t} value: ${e}, defaulting to 0`),0):Math.max(0,e)}extractFilename(e){try{let t=e.split("/");return t[t.length-1]||null}catch(t){return console.warn(`Failed to extract filename from URL: ${e}`),null}}async createInitialReport(e){try{return await s.M.create(e)}catch(e){throw new r.Ay(`Failed to create analysis report: ${e instanceof Error?e.message:String(e)}`,e)}}async updateProgress(e,t,a){try{await s.M.updateById(e,{progress:Math.max(0,Math.min(100,t))}),a&&console.log(`Analysis ${e}: ${t}% - ${a}`)}catch(t){console.error(`Failed to update progress for analysis ${e}:`,t)}}async completeAnalysis(e,t){try{await s.M.updateById(e,{generatedData:t,status:"completed",progress:100,completedAt:new Date})}catch(e){throw new r.Ay(`Failed to save analysis results: ${e instanceof Error?e.message:String(e)}`,e)}}async markAnalysisFailed(e,t){try{let a={error:t instanceof Error?t.message:String(t),errorType:t.constructor.name,failedAt:new Date().toISOString()};await s.M.updateById(e,{status:"failed",generatedData:a,completedAt:new Date})}catch(t){console.error(`Failed to mark analysis ${e} as failed:`,t)}}async getAnalysisStatus(e,t){try{let n=await s.M.findById(e);if(!n)return null;let i=!1,o=n.userId?.toString()||"",l=t?.toString()||"";if(o===l)i=!0;else try{let{userRepository:t}=await a.e(944).then(a.bind(a,50944));if("string"==typeof o&&o.includes("@")){let a=await t.findByEmail(o);a&&a._id===l&&(i=!0,console.log(`Migration: Report ${e} has email userId, matched with ObjectId`))}else{let a=await t.findById(l);a&&o===a.email&&(i=!0,console.log(`Migration: Report ${e} comparison between ObjectId and email`))}}catch(e){console.error("Error during migration-compatible access check:",e)}if(console.log("Access check result:",{reportId:e,reportUserId:n.userId,providedUserId:t,hasAccess:i}),!i)throw new r.Ay("Access denied: Analysis belongs to different user");return n}catch(e){if(e instanceof r.Ay)throw e;throw new r.Ay(`Failed to get analysis status: ${e instanceof Error?e.message:String(e)}`,e)}}async getUserAnalyses(e,t=50){try{let n=await s.M.findByUserId(e,t);if(0===n.length&&24===e.length&&!e.includes("@"))try{let{userRepository:r}=await a.e(944).then(a.bind(a,50944)),i=await r.findById(e);if(i&&i.email){let a=await s.M.findByUserId(i.email,t);n=[...n,...a],console.log(`Migration: Found ${a.length} reports by email for user ObjectId ${e}`)}}catch(e){console.error("Error during migration-compatible user analysis lookup:",e)}return n}catch(e){throw new r.Ay(`Failed to get user analyses: ${e instanceof Error?e.message:String(e)}`,e)}}async deleteAnalysis(e,t){try{if(!await this.getAnalysisStatus(e,t))return!1;return await s.M.deleteById(e)}catch(e){throw new r.Ay(`Failed to delete analysis: ${e instanceof Error?e.message:String(e)}`,e)}}async testService(){let e={geminiConnection:!1,database:!1,overall:!1};try{if(this.client){let t=await this.client.models.generateContent({model:this.modelName,contents:[{text:'Respond with exactly: {"test": "success"}'}]});t.text&&t.text.includes("success")&&(e.geminiConnection=!0)}}catch(e){console.error("Gemini connection test failed:",e)}try{await s.M.countByUserId("test-user-id"),e.database=!0}catch(e){console.error("Database test failed:",e)}return e.overall=e.geminiConnection&&e.database,e}}let c=new l},89254:(e,t,a)=>{"use strict";a.d(t,{M:()=>c});var n=a(11185),s=a.n(n);let r=new(s()).Schema({userId:{type:s().Schema.Types.ObjectId,ref:"User",required:!0,index:!0},uploadId:{type:String,required:!1},reportTitle:{type:String,required:!0},sourceDocumentCount:{type:Number,required:!0},status:{type:String,enum:["processing","completed","failed"],default:"processing",required:!0},progress:{type:Number,min:0,max:100,default:0},generatedData:{type:Object,required:!1},completedAt:{type:Date,required:!1}},{timestamps:!0});r.index({userId:1,createdAt:-1}),r.index({status:1}),r.index({userId:1,status:1});let i=s().models?.AnalysisReport||s().model("AnalysisReport",r);var o=a(77919);class l{async ensureConnection(){process.env.JEST_WORKER_ID||await (0,o.Z)()}async create(e){await this.ensureConnection();let t=new i({userId:e.userId,uploadId:e.uploadId,reportTitle:e.reportTitle,sourceDocumentCount:e.sourceDocumentCount,status:e.status||"processing",progress:e.progress||0,generatedData:e.generatedData}),a=await t.save();return this.transformToPublicReport(a)}async findById(e){await this.ensureConnection();let t=await i.findById(e).exec();return t?this.transformToPublicReport(t):null}async findByUserId(e,t=50){return await this.ensureConnection(),(await i.find({userId:e}).sort({createdAt:-1}).limit(t).exec()).map(e=>this.transformToPublicReport(e))}async findByUserIdAndStatus(e,t,a=50){return await this.ensureConnection(),(await i.find({userId:e,status:t}).sort({createdAt:-1}).limit(a).exec()).map(e=>this.transformToPublicReport(e))}async updateById(e,t){await this.ensureConnection();let a={};void 0!==t.reportTitle&&(a.reportTitle=t.reportTitle),void 0!==t.status&&(a.status=t.status),void 0!==t.progress&&(a.progress=t.progress),void 0!==t.generatedData&&(a.generatedData=t.generatedData),void 0!==t.completedAt&&(a.completedAt=t.completedAt);let n=await i.findByIdAndUpdate(e,{$set:a},{new:!0,runValidators:!0}).exec();return n?this.transformToPublicReport(n):null}async deleteById(e){return await this.ensureConnection(),!!await i.findByIdAndDelete(e).exec()}async deleteByUserId(e){return await this.ensureConnection(),(await i.deleteMany({userId:e}).exec()).deletedCount||0}async findByUploadId(e){await this.ensureConnection();let t=await i.findOne({uploadId:e}).exec();return t?this.transformToPublicReport(t):null}async countByUserId(e){return await this.ensureConnection(),i.countDocuments({userId:e}).exec()}async countByUserIdAndStatus(e,t){return await this.ensureConnection(),i.countDocuments({userId:e,status:t}).exec()}async findPaginated(e,t){await this.ensureConnection();let{page:a,limit:n,sort:s={createdAt:-1}}=t,[r,o]=await Promise.all([i.find(e).sort(s).skip((a-1)*n).limit(n).exec(),i.countDocuments(e).exec()]);return{data:r.map(e=>this.transformToPublicReport(e)),page:a,limit:n,total:o,pages:Math.ceil(o/n)}}async deleteByIdAndUserId(e,t){return await this.ensureConnection(),!!await i.findOneAndDelete({_id:e,userId:t}).exec()}transformToPublicReport(e){return{_id:e._id.toString(),userId:e.userId,uploadId:e.uploadId,reportTitle:e.reportTitle,sourceDocumentCount:e.sourceDocumentCount,status:e.status,progress:e.progress,generatedData:e.generatedData,createdAt:e.createdAt,updatedAt:e.updatedAt,completedAt:e.completedAt}}}let c=new l}};