"use strict";exports.id=944,exports.ids=[944],exports.modules={50944:(e,t,n)=>{n.d(t,{userRepository:()=>c});var a=n(11185),r=n.n(a);let s=new a.Schema({name:{type:String,required:[!0,"Name is required"],trim:!0,maxlength:[100,"Name cannot exceed 100 characters"]},email:{type:String,required:[!0,"Email is required"],unique:!0,lowercase:!0,trim:!0,match:[/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,"Please enter a valid email address"]},password:{type:String,required:[!0,"Password is required"],minlength:[6,"Password must be at least 6 characters long"]}},{timestamps:!0,collection:"users"}),i=r().models.User||r().model("User",s);var d=n(77919);class o{async ensureConnection(){process.env.JEST_WORKER_ID||await (0,d.Z)()}async findByEmail(e){await this.ensureConnection();let t=await i.findOne({email:e}).exec();return t?this.transformToPublicUser(t):null}async findById(e){await this.ensureConnection();let t=await i.findById(e).exec();return t?this.transformToPublicUser(t):null}async create(e){await this.ensureConnection();let t=new i({name:e.name,email:e.email,password:e.password}),n=await t.save();return this.transformToPublicUser(n)}async updateById(e,t){await this.ensureConnection();let n=await i.findByIdAndUpdate(e,{$set:t},{new:!0,runValidators:!0}).exec();return n?this.transformToPublicUser(n):null}async deleteById(e){return await this.ensureConnection(),!!await i.findByIdAndDelete(e).exec()}async existsByEmail(e){return await this.ensureConnection(),await i.countDocuments({email:e}).exec()>0}async findByEmailWithPassword(e){return await this.ensureConnection(),i.findOne({email:e}).exec()}transformToPublicUser(e){return{_id:e._id.toString(),name:e.name,email:e.email,createdAt:e.createdAt,updatedAt:e.updatedAt}}}let c=new o}};